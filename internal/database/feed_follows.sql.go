// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: feed_follows.sql

package database

import (
	"context"
)

const followFeed = `-- name: FollowFeed :one
INSERT INTO feed_follows(user_id, feed_id)
VALUES($1, $2)
RETURNING id, created_at, updated_at, user_id, feed_id
`

type FollowFeedParams struct {
	UserID int32
	FeedID int64
}

func (q *Queries) FollowFeed(ctx context.Context, arg FollowFeedParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, followFeed, arg.UserID, arg.FeedID)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const getUserFeedFollows = `-- name: GetUserFeedFollows :many
SELECT id, created_at, updated_at, user_id, feed_id FROM feed_follows WHERE user_id = $1
`

func (q *Queries) GetUserFeedFollows(ctx context.Context, userID int32) ([]FeedFollow, error) {
	rows, err := q.db.QueryContext(ctx, getUserFeedFollows, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedFollow
	for rows.Next() {
		var i FeedFollow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollowFeed = `-- name: UnfollowFeed :execrows
DELETE FROM feed_follows WHERE id = $1 AND user_id = $2
`

type UnfollowFeedParams struct {
	ID     int64
	UserID int32
}

func (q *Queries) UnfollowFeed(ctx context.Context, arg UnfollowFeedParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, unfollowFeed, arg.ID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
